#!/bin/bash
set -x

if [ -z "$ARCH" ]; then
    ARCH="amd64"
fi

if [ -z "$OS" ]; then
    OS="linux"
fi

FALLBACK_VERSION=v1.20.4+rke2r1

# This version script expects either a tag of format: <rke2-version> or no tag at all.

TREE_STATE=clean
COMMIT=${COMMIT:-${DRONE_COMMIT:-${GITHUB_SHA:-unknown}}}
TAG=${TAG:-${DRONE_TAG:-$GITHUB_TAG}}

# If we're in a dapperized environment, we should be able to figure out what our current tag and commit are.
if [ -z "${TAG}" ]; then
    if [ -d ${DAPPER_SOURCE}/.git ]; then
        pushd ${DAPPER_SOURCE}

        if [ -n "$(git status --porcelain --untracked-files=no)" ]; then
            DIRTY="dirty"
            TREE_STATE=dirty
        fi

        if [[ "$TREE_STATE" == "clean" && -z "$TAG" ]]; then
            TAG=$(git tag -l --contains HEAD | head -n 1) # this is going to not work if you have multiple tags pointing to the same commit
        fi

        COMMIT=$(git rev-parse HEAD)
        if [ -z "$COMMIT" ]; then
            COMMIT=$(git rev-parse HEAD || true)
            echo $COMMIT
            exit 1
        fi
        popd
    fi

    if [[ -n "$TAG" ]]; then
        if [[ "$TREE_STATE" = "clean" ]]; then
            VERSION=$TAG # We will only accept the tag as our version if the tree state is clean and the tag is in fact defined.
        fi
    fi
else
    VERSION=$TAG
fi


# In the event of us doing a build with no corresponding tag that we can discern, we'll go ahead and just build the package assuming we were dealing with master.
# This means we'll go to GitHub and pull the latest RKE2 release, and parse it to what we are expecting.

if [[ -z "$VERSION" ]]; then

    if [[ -z "$COMMIT" ]]; then # Validate our commit hash to make sure it's actually known, otherwise our version will be off.
        echo "Unknown commit hash. Exiting."
        exit 1
    fi

    # If our GitHub API Rate Limit remaining is 0, don't even try calling the GitHub API.
    if [[ $(curl -v https://api.github.com/rate_limit | jq -r '.rate.remaining') = 0 ]]; then
        VERSION="${FALLBACK_VERSION}"
    else
        VERSION=$(curl -v https://api.github.com/repos/rancher/rke2/releases | jq -r '[.[] | select(.tag_name | contains("-") | not) | select(.assets[] | length > 2)] | sort_by(.tag_name) | .[-1].tag_name')
        if [[ -z "$VERSION" ]]; then # Fall back to a known good RKE2 version because we had an error pulling the latest
            VERSION="${FALLBACK_VERSION}"
        fi
    fi

else # validate the tag format and create our VERSION variable
    if ! [[ $TAG =~ ^v[0-9]{1}\.[0-9]{2}\.[0-9]+-*[a-zA-Z0-9]*\+rke2r[0-9]+$ ]]; then
        echo "Tag does not match our expected format. Exiting."
        exit 1
    fi

    VERSION="${TAG}"
fi

URI_VERSION=$(sed -e 's/+/%2B/g' <<<"$VERSION")
VERSION=$(sed -e 's/+/-/g' <<<"$VERSION")

REPO=${REPO:-rancher}

IMAGE=${REPO}/system-agent-installer-rke2:${VERSION}
